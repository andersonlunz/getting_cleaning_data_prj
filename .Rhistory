cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
iris
iris[iris$Species=='Sepal.Length']
iris[iris$Species=='Sepal.Length',]
iris[iris$Species=='virginica',]
v<-iris[iris$Species=='virginica',]
v[,'Sepal.Length']
mean(v[,'Sepal.Length'])
?gl
gl(3,10)
colnames(iris)
?rowMeans
rowMeans(iris[, 1:4])
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mpg, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
colnames(mtcars)
with(mtcars, tapply(hp, cyl, mean))
t1 <- with(mtcars, tapply(hp, cyl, mean))[1]
t2 <- with(mtcars, tapply(hp, cyl, mean))[2]
t2-t1
t1
t2
t2 <- with(mtcars, tapply(hp, cyl, mean))[3]
t2-t1
debug(ls)
ls
ls()
\q
\x
exit
exit()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
pattern)
undebug(ls)
?abs
abs(t2-t1)
set.seed(1)
rpois(5, 2)
?rnorm
?system.time
?oauth_app
library(httr)
install.packages("httr")
library(httr)
?oauth_app
?GET
pg2 = GET("https://github.com/login/oauth/authorize", authenticate("andersonlunz@gmail.com","a-11nael"))
pg2
names(pg2)
content2 = content(pg2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
library(XML)
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//date", xmlValue)
content2
xpathSApply(parsedHtml, "//repo", xmlValue)
xpathSApply(parsedHtml, "//repos", xmlValue)
xpathSApply(parsedHtml, "//repos", xmlValue)[1]
parsedHtml
pg2 = GET("https://github.com/login/oauth/authorize", authenticate("andersonlunz@gmail.com","a-11nael"))
pg2
p = GET("https://api.github.com/users/jtleek/repos")
p
names(p)
p
html2 = GET("https://api.github.com/users/jtleek/repos")
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
parsedHtml
xpathSApply(parsedHtml, "//datasharing", xmlValue)
names(p)
xpathSApply(parsedHtml, "//ssh_url", xmlValue)
xpathSApply(parsedHtml, "//ssh_url", xmlValue)[1]
xpathSApply(parsedHtml, "//ssh_url", xmlValue)[0]
url <- "https://api.github.com/users/jtleek/repos"
html <- htmlTreeParse(url, useInternalNodes=T)
library(httr); url <- "https://api.github.com/users/jtleek/repos"; html2 = GET(url); content2 = content(html2,as="text"); parsedHtml = htmlParse(content2,asText=TRUE); xpathSApply(parsedHtml, "//date", xmlValue)
library(httr)
auth01 = GET("https://github.com/login/oauth/authorize", authenticate("andersonlunz@gmail.com","a-11nael"))
myapp = oauth_app("github", key="8a9444f1c1fd91c3da5d",secret="50dd3e7988b7970f86eb298b5acecfb80df7f191")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
auth01 = GET("https://github.com/login/oauth/authorize", authenticate("andersonlunz@gmail.com","a-11nael"))
auth01
html2 = GET("https://api.github.com/users/jtleek/repos")
json1 = content(html2)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages("jsonlite")
getwd()
setwd("/Users/andersonlunz/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/")
getwd()
?read.ta
?read.table
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
class(test_ds)
summary(test_ds)
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
column_names_df <- read.table("features.txt", header=FALSE)
View(column_names_df)
column_names_df[2]
class(column_names_df[2])
rbind(column_names_df[2])
cbind(column_names_df[2])
cbind(column_names_df[,2])
cbind(column_names_df[,"V2"])
column_names_df
column_names_df[,2]
class(column_names_df[,2])
c(column_names_df$V2)
c(column_names_df$V1)
c(column_names_df$V3)
c(column_names_df$V2)
c(column_names_df[,2])
c(column_names_df[,"V2"])
c(\)
column_names_df[,"V2"]
as.vector(column_names_df[,"V2"])
class(as.vector(column_names_df[,"V2"]))
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
View(merged_df)
colnames(merged_df)
v <- c("tBodyAcc-mean()-X","tBodyAcc-mean()-Y","tBodyAcc-mean()-Z")
merged_df[,v]
merged_df[,1]
merged_df[,v]
merged_df[v]
?subset
merged_df[,c("tBodyAcc-mean()-X","tBodyAcc-mean()-Y","tBodyAcc-mean()-Z")]
View(merged_df)
head(colnames(merged_df))
v <- c("tBodyAcc.mean...X","tBodyAcc.mean...Y","tBodyAcc.mean...Z")
merged_df[,v]
features_df
column_names_vector
head(merged_df[,c("tBodyAcc-mean()-X","tBodyAcc-mean()-Y","tBodyAcc-mean()-Z")])
head(merged_df[,v])
z <- c(1,2,3)
head(merged_df[,z])
?which
z <- c(TRUE,FALSE,TRUE)
head(merged_df[,z])
head(merged_df[,TRUE])
head(merged_df[,FALSE])
?tapply
?grepl
v <- c("tBodyAcc.mean...X","tBodyAcc.mean...Y","tBodyAcc.mean...Z")
grepl("Y",v)
rbind(v,grepl("Y",v))
grepl("Y",v, value=FALSE)
grep("Y",v, value=FALSE)
grep("Y",v)
features_df <- read.table("features.txt", header=FALSE)
features_df <- read.table("features.txt", header=FALSE)
column_names_vector <- as.vector(features_df[,2])
column_names_vector
features_df <- read.table("features.txt", header=FALSE, col.names=c("id","name"))
View(features_df)
features_df <- read.table("features.txt", header=FALSE, col.names=c("id","feature_name"))
column_names_vector <- as.vector(features_df[,"feature_name"])
features_df <- read.table("features.txt", header=FALSE, col.names=c("id","feature_name"))
column_names_vector <- as.vector(features_df[,"feature_name"])
mean_columns_index <- grep("mean", column_names_vector, ignore.case=TRUE)
features_df <- read.table("features.txt", header=FALSE, col.names=c("id","feature_name"))
column_names_vector <- as.vector(features_df[,"feature_name"])
mean_columns_indexes <- grep("mean()", column_names_vector, ignore.case=TRUE)
std_columns_indexes <- grep("std()", column_names_vector, ignore.case=TRUE)
features_df <- read.table("features.txt", header=FALSE, col.names=c("id","feature_name"))
column_names_vector <- as.vector(features_df[,"feature_name"])
mean_columns_indexes <- grep("mean()", column_names_vector, ignore.case=TRUE)
std_columns_indexes <- grep("std()", column_names_vector, ignore.case=TRUE)
z <- c(mean_columns_indexes, std_columns_indexes)
z
?sort
sort(z)
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
View(final_df)
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
View(final_df)
colnames(final_df)
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
colnames(final_df)
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
source('~/Dropbox/coursera/getting_cleaning_data/course_project/project_work_area/run_analysis.R')
colnames(final_df)
View(final_df)
View(final_df)
?dir
?dir.create
?unzip
